# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mazesim', [dirname(__file__)])
        except ImportError:
            import _mazesim
            return _mazesim
        if fp is not None:
            try:
                _mod = imp.load_module('_mazesim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mazesim = swig_import_helper()
    del swig_import_helper
else:
    import _mazesim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)
    __repr__ = _swig_repr
    def get_range(self, *args): return _mazesim.Environment_get_range(self, *args)
    def __init__(self, *args): 
        this = _mazesim.new_Environment(*args)
        try: self.this.append(this)
        except: self.this = this
    def display(self): return _mazesim.Environment_display(self)
    def distance_to_start(self): return _mazesim.Environment_distance_to_start(self)
    def distance_to_target(self): return _mazesim.Environment_distance_to_target(self)
    def distance_to_poi(self): return _mazesim.Environment_distance_to_poi(self)
    def generate_neural_inputs_wrapper(self, *args): return _mazesim.Environment_generate_neural_inputs_wrapper(self, *args)
    def generate_neural_inputs(self, *args): return _mazesim.Environment_generate_neural_inputs(self, *args)
    def interpret_outputs(self, *args): return _mazesim.Environment_interpret_outputs(self, *args)
    def Update(self): return _mazesim.Environment_Update(self)
    def collide_lines(self, *args): return _mazesim.Environment_collide_lines(self, *args)
    def update_rangefinders(self, *args): return _mazesim.Environment_update_rangefinders(self, *args)
    def update_radar(self, *args): return _mazesim.Environment_update_radar(self, *args)
    def get_line_count(self): return _mazesim.Environment_get_line_count(self)
    def get_line(self, *args): return _mazesim.Environment_get_line(self, *args)
    def update_radar_gen(self, *args): return _mazesim.Environment_update_radar_gen(self, *args)
    __swig_destroy__ = _mazesim.delete_Environment
    __del__ = lambda self : None;
    __swig_setmethods__["closest_to_target"] = _mazesim.Environment_closest_to_target_set
    __swig_getmethods__["closest_to_target"] = _mazesim.Environment_closest_to_target_get
    if _newclass:closest_to_target = _swig_property(_mazesim.Environment_closest_to_target_get, _mazesim.Environment_closest_to_target_set)
    __swig_setmethods__["steps"] = _mazesim.Environment_steps_set
    __swig_getmethods__["steps"] = _mazesim.Environment_steps_get
    if _newclass:steps = _swig_property(_mazesim.Environment_steps_get, _mazesim.Environment_steps_set)
    __swig_setmethods__["closest_to_poi"] = _mazesim.Environment_closest_to_poi_set
    __swig_getmethods__["closest_to_poi"] = _mazesim.Environment_closest_to_poi_get
    if _newclass:closest_to_poi = _swig_property(_mazesim.Environment_closest_to_poi_get, _mazesim.Environment_closest_to_poi_set)
    __swig_setmethods__["lines"] = _mazesim.Environment_lines_set
    __swig_getmethods__["lines"] = _mazesim.Environment_lines_get
    if _newclass:lines = _swig_property(_mazesim.Environment_lines_get, _mazesim.Environment_lines_set)
    __swig_setmethods__["hero"] = _mazesim.Environment_hero_set
    __swig_getmethods__["hero"] = _mazesim.Environment_hero_get
    if _newclass:hero = _swig_property(_mazesim.Environment_hero_get, _mazesim.Environment_hero_set)
    __swig_setmethods__["end"] = _mazesim.Environment_end_set
    __swig_getmethods__["end"] = _mazesim.Environment_end_get
    if _newclass:end = _swig_property(_mazesim.Environment_end_get, _mazesim.Environment_end_set)
    __swig_setmethods__["poi"] = _mazesim.Environment_poi_set
    __swig_getmethods__["poi"] = _mazesim.Environment_poi_get
    if _newclass:poi = _swig_property(_mazesim.Environment_poi_get, _mazesim.Environment_poi_set)
    __swig_setmethods__["reachpoi"] = _mazesim.Environment_reachpoi_set
    __swig_getmethods__["reachpoi"] = _mazesim.Environment_reachpoi_get
    if _newclass:reachpoi = _swig_property(_mazesim.Environment_reachpoi_get, _mazesim.Environment_reachpoi_set)
    __swig_setmethods__["reachgoal"] = _mazesim.Environment_reachgoal_set
    __swig_getmethods__["reachgoal"] = _mazesim.Environment_reachgoal_get
    if _newclass:reachgoal = _swig_property(_mazesim.Environment_reachgoal_get, _mazesim.Environment_reachgoal_set)
    def get_sensor_size(self): return _mazesim.Environment_get_sensor_size(self)
    __swig_setmethods__["goalattract"] = _mazesim.Environment_goalattract_set
    __swig_getmethods__["goalattract"] = _mazesim.Environment_goalattract_get
    if _newclass:goalattract = _swig_property(_mazesim.Environment_goalattract_get, _mazesim.Environment_goalattract_set)
Environment_swigregister = _mazesim.Environment_swigregister
Environment_swigregister(Environment)

class Character(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Character, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Character, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rangeFinderAngles"] = _mazesim.Character_rangeFinderAngles_set
    __swig_getmethods__["rangeFinderAngles"] = _mazesim.Character_rangeFinderAngles_get
    if _newclass:rangeFinderAngles = _swig_property(_mazesim.Character_rangeFinderAngles_get, _mazesim.Character_rangeFinderAngles_set)
    __swig_setmethods__["radarAngles1"] = _mazesim.Character_radarAngles1_set
    __swig_getmethods__["radarAngles1"] = _mazesim.Character_radarAngles1_get
    if _newclass:radarAngles1 = _swig_property(_mazesim.Character_radarAngles1_get, _mazesim.Character_radarAngles1_set)
    __swig_setmethods__["radarAngles2"] = _mazesim.Character_radarAngles2_set
    __swig_getmethods__["radarAngles2"] = _mazesim.Character_radarAngles2_get
    if _newclass:radarAngles2 = _swig_property(_mazesim.Character_radarAngles2_get, _mazesim.Character_radarAngles2_set)
    __swig_setmethods__["radar"] = _mazesim.Character_radar_set
    __swig_getmethods__["radar"] = _mazesim.Character_radar_get
    if _newclass:radar = _swig_property(_mazesim.Character_radar_get, _mazesim.Character_radar_set)
    __swig_setmethods__["poi_radar"] = _mazesim.Character_poi_radar_set
    __swig_getmethods__["poi_radar"] = _mazesim.Character_poi_radar_get
    if _newclass:poi_radar = _swig_property(_mazesim.Character_poi_radar_get, _mazesim.Character_poi_radar_set)
    __swig_setmethods__["rangeFinders"] = _mazesim.Character_rangeFinders_set
    __swig_getmethods__["rangeFinders"] = _mazesim.Character_rangeFinders_get
    if _newclass:rangeFinders = _swig_property(_mazesim.Character_rangeFinders_get, _mazesim.Character_rangeFinders_set)
    __swig_setmethods__["location"] = _mazesim.Character_location_set
    __swig_getmethods__["location"] = _mazesim.Character_location_get
    if _newclass:location = _swig_property(_mazesim.Character_location_get, _mazesim.Character_location_set)
    __swig_setmethods__["start"] = _mazesim.Character_start_set
    __swig_getmethods__["start"] = _mazesim.Character_start_get
    if _newclass:start = _swig_property(_mazesim.Character_start_get, _mazesim.Character_start_set)
    __swig_setmethods__["collide"] = _mazesim.Character_collide_set
    __swig_getmethods__["collide"] = _mazesim.Character_collide_get
    if _newclass:collide = _swig_property(_mazesim.Character_collide_get, _mazesim.Character_collide_set)
    __swig_setmethods__["collisions"] = _mazesim.Character_collisions_set
    __swig_getmethods__["collisions"] = _mazesim.Character_collisions_get
    if _newclass:collisions = _swig_property(_mazesim.Character_collisions_get, _mazesim.Character_collisions_set)
    __swig_setmethods__["total_spin"] = _mazesim.Character_total_spin_set
    __swig_getmethods__["total_spin"] = _mazesim.Character_total_spin_get
    if _newclass:total_spin = _swig_property(_mazesim.Character_total_spin_get, _mazesim.Character_total_spin_set)
    __swig_setmethods__["heading"] = _mazesim.Character_heading_set
    __swig_getmethods__["heading"] = _mazesim.Character_heading_get
    if _newclass:heading = _swig_property(_mazesim.Character_heading_get, _mazesim.Character_heading_set)
    __swig_setmethods__["speed"] = _mazesim.Character_speed_set
    __swig_getmethods__["speed"] = _mazesim.Character_speed_get
    if _newclass:speed = _swig_property(_mazesim.Character_speed_get, _mazesim.Character_speed_set)
    __swig_setmethods__["ang_vel"] = _mazesim.Character_ang_vel_set
    __swig_getmethods__["ang_vel"] = _mazesim.Character_ang_vel_get
    if _newclass:ang_vel = _swig_property(_mazesim.Character_ang_vel_get, _mazesim.Character_ang_vel_set)
    __swig_setmethods__["radius"] = _mazesim.Character_radius_set
    __swig_getmethods__["radius"] = _mazesim.Character_radius_get
    if _newclass:radius = _swig_property(_mazesim.Character_radius_get, _mazesim.Character_radius_set)
    __swig_setmethods__["rangefinder_range"] = _mazesim.Character_rangefinder_range_set
    __swig_getmethods__["rangefinder_range"] = _mazesim.Character_rangefinder_range_get
    if _newclass:rangefinder_range = _swig_property(_mazesim.Character_rangefinder_range_get, _mazesim.Character_rangefinder_range_set)
    __swig_setmethods__["total_dist"] = _mazesim.Character_total_dist_set
    __swig_getmethods__["total_dist"] = _mazesim.Character_total_dist_get
    if _newclass:total_dist = _swig_property(_mazesim.Character_total_dist_get, _mazesim.Character_total_dist_set)
    def __init__(self): 
        this = _mazesim.new_Character()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mazesim.delete_Character
    __del__ = lambda self : None;
Character_swigregister = _mazesim.Character_swigregister
Character_swigregister(Character)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mazesim.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    def fromfile(self, *args): return _mazesim.Point_fromfile(self, *args)
    def angle(self): return _mazesim.Point_angle(self)
    def rotate(self, *args): return _mazesim.Point_rotate(self, *args)
    def distance(self, *args): return _mazesim.Point_distance(self, *args)
    __swig_setmethods__["x"] = _mazesim.Point_x_set
    __swig_getmethods__["x"] = _mazesim.Point_x_get
    if _newclass:x = _swig_property(_mazesim.Point_x_get, _mazesim.Point_x_set)
    __swig_setmethods__["y"] = _mazesim.Point_y_set
    __swig_getmethods__["y"] = _mazesim.Point_y_get
    if _newclass:y = _swig_property(_mazesim.Point_y_get, _mazesim.Point_y_set)
    __swig_destroy__ = _mazesim.delete_Point
    __del__ = lambda self : None;
Point_swigregister = _mazesim.Point_swigregister
Point_swigregister(Point)

class Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mazesim.new_Line(*args)
        try: self.this.append(this)
        except: self.this = this
    def midpoint(self): return _mazesim.Line_midpoint(self)
    def intersection(self, *args): return _mazesim.Line_intersection(self, *args)
    def distance(self, *args): return _mazesim.Line_distance(self, *args)
    def length(self): return _mazesim.Line_length(self)
    __swig_setmethods__["a"] = _mazesim.Line_a_set
    __swig_getmethods__["a"] = _mazesim.Line_a_get
    if _newclass:a = _swig_property(_mazesim.Line_a_get, _mazesim.Line_a_set)
    __swig_setmethods__["b"] = _mazesim.Line_b_set
    __swig_getmethods__["b"] = _mazesim.Line_b_get
    if _newclass:b = _swig_property(_mazesim.Line_b_get, _mazesim.Line_b_set)
    __swig_destroy__ = _mazesim.delete_Line
    __del__ = lambda self : None;
Line_swigregister = _mazesim.Line_swigregister
Line_swigregister(Line)

# This file is compatible with both classic and new-style classes.


